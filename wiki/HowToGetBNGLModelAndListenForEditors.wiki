#summary Tutorial for getting new BNGL models and listening for changes in them.

= Introduction =

This How-To explains the details of getting a BNGL model, listening for changes in the models, and listening for new editors.

This is a continuation of the tutorial in [HowToAddView How to Add a View to !RuleBender], so please make sure that works before starting this one.

== Relevant Eclipse RCP Frameworks == 

=== IPartService ===

The IPartService tracks all of the changes that a Part (a View as far as we are concerned) undergoes while the program is running. Specifically, our view is going to implement the IPartListener2 interface and then register itself as a part listener when it is initialized.  


= Steps =

 # In {{{rulebender.example.ExampleView.java}}} add "{{{implements IPartListener2}}}" to the class declaration.

 # Use the Eclipse suggestion or manually add the following methods to the class:

{{{
@Override
	public void partActivated(IWorkbenchPartReference partRef) {
		// TODO Auto-generated method stub
	}

	@Override
	public void partBroughtToTop(IWorkbenchPartReference partRef) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void partClosed(IWorkbenchPartReference partRef) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void partDeactivated(IWorkbenchPartReference partRef) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void partOpened(IWorkbenchPartReference partRef) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void partHidden(IWorkbenchPartReference partRef) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void partVisible(IWorkbenchPartReference partRef) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void partInputChanged(IWorkbenchPartReference partRef) {
		// TODO Auto-generated method stub
		
	}
}}}

 # In the "{{{createPartControl(Composite parent)}}}" method, add the following line at the end to register the view as a part listener:

{{{// Register the view as a part listener.
		getSite().getPage().addPartListener(this);}}}

 # Fill in the {{{partActivated(IWorkbenchPartReference partRef) }}} method.  This is where all of the work is going to be done.  Basically, we check to see that the part activated is a !BNGLEditor.  Each !BNGLEditor is associated with a !BNGLModel object that is automatically updated when the file is saved.  When the !BNGLModel is updated a !PropertyChangeEvent is sent to all of the listeners, so we add a PropertyChangeListener to the object.   The particular property that we are interested in for the model is the !AST (abstract syntax tree).  This ast is what we will be using to construct our model for the visualization (or whatever else we are building in this view).  For now, we are ignoring the details of the !AST and just printing to our example view. For more information about handling the !AST see [HowToBuildObjectsFromAST How To Build Objects From the BNGL Abstract Syntax Tree].

See the IPartListener2 API for information on the other methods. 

{{{
@Override
	public void partActivated(IWorkbenchPartReference partRef) 
	{
		// If it's a bngl editor.   (Cannot remember why there is id and instanceof checking
		// but I would not change it without serious testing.)
		if(partRef.getId().equals("rulebender.editors.bngl") && partRef.getPart(false) instanceof BNGLEditor)
		{	
			// Get the model.
			BNGLModel model = ((BNGLEditor) partRef.getPart(false)).getModel();
		
			// Create a property changed listener for when files are saved and 
			// models are updated.
			PropertyChangeListener pcl = new PropertyChangeListener()
			{
				public void propertyChange(PropertyChangeEvent propertyChangeEvent) 
				{
					String filePath = ((BNGLModel) propertyChangeEvent.getSource()).getPathID();
					String propertyName = propertyChangeEvent.getPropertyName();
					
					if(propertyName.equals(BNGLModel.AST))
					{
						//Update the display object that is associated with the path and ast. 
						m_label.setText("Property Changed on AST for " + filePath);
					}
				}
			};
				
			model.addPropertyChangeListener(pcl);
						
			m_label.setText("New model opened!  " + model.getPathID());			
		} // end if it's an editor block	
	}

}}}

== Full Code ==


{{{

package rulebender.example;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.ui.IPartListener2;
import org.eclipse.ui.IWorkbenchPartReference;
import org.eclipse.ui.part.ViewPart;

import rulebender.editors.bngl.BNGLEditor;
import rulebender.editors.bngl.model.BNGLModel;

public class ExampleView extends ViewPart implements IPartListener2
{

	// A label for output
	private Label m_label;
	
	// Generally nothing happens in the constructor
	public ExampleView() {
	
	}

	// This is where the view itself is defined using JFace widgets or SWT.
	@Override
	public void createPartControl(Composite parent) 
	{
		m_label = new Label(parent, SWT.BORDER);
		m_label.setText("Hello from a new view!!!");

		// Register the view as a part listener.
		getSite().getPage().addPartListener(this);
	}

	// This gets called when the view gets focus from the user.  
	// You do not have to implement it, but you can tell any of the
	// view elements that you define about the focus event if you want to.
	@Override
	public void setFocus() {}

	@Override
	public void partActivated(IWorkbenchPartReference partRef) 
	{
		// If it's a bngl editor.   (Cannot remember why there is id and instanceof checking
		// but I would not change it without serious testing.)
		if(partRef.getId().equals("rulebender.editors.bngl") && partRef.getPart(false) instanceof BNGLEditor)
		{	
			// Get the model.
			BNGLModel model = ((BNGLEditor) partRef.getPart(false)).getModel();
		
			// Create a property changed listener for when files are saved and 
			// models are updated.
			PropertyChangeListener pcl = new PropertyChangeListener()
			{
				public void propertyChange(PropertyChangeEvent propertyChangeEvent) 
				{
					String filePath = ((BNGLModel) propertyChangeEvent.getSource()).getPathID();
					String propertyName = propertyChangeEvent.getPropertyName();
					
					if(propertyName.equals(BNGLModel.AST))
					{
						//Update the display object that is associated with the path and ast. 
						m_label.setText("Property Changed on AST for " + filePath);
					}
				}
			};
				
			model.addPropertyChangeListener(pcl);
						
			m_label.setText("New model opened!  " + model.getPathID());			
		} // end if it's an editor block	
	}

	@Override
	public void partBroughtToTop(IWorkbenchPartReference partRef) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void partClosed(IWorkbenchPartReference partRef) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void partDeactivated(IWorkbenchPartReference partRef) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void partOpened(IWorkbenchPartReference partRef) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void partHidden(IWorkbenchPartReference partRef) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void partVisible(IWorkbenchPartReference partRef) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void partInputChanged(IWorkbenchPartReference partRef) {
		// TODO Auto-generated method stub
		
	}
}
}}}