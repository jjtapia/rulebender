package rulebender;

import java.net.URL;

import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.Platform;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.ui.IEditorReference;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.application.IWorkbenchConfigurer;
import org.eclipse.ui.application.IWorkbenchWindowConfigurer;
import org.eclipse.ui.application.WorkbenchAdvisor;
import org.eclipse.ui.application.WorkbenchWindowAdvisor;
import org.eclipse.ui.internal.ide.IDEWorkbenchPlugin;
import org.osgi.framework.Bundle;

/**
 * Another class that is generated by eclipse and necessary to interact
 * with the Rich Client Platform.  This class specifically helps setup
 * the workbench.   
 * 
 * In this class I have added the PERSPECTIVE_ID that represents the main 
 * modeling perspective (rulebender.perspective (I know this is not descriptive, 
 * but changing it is not a proirity and I cannot remember all of the places 
 * where this label is used)).
 * 
 * Also, the getDefaultPageInput method has been changed to return the root 
 * directory for the ResourcesPlugin, which helps with initializing the 
 * CommonNavigatorFramework (The file browser).
 * 
 * The initialize method contains the necessary registerAdapters method call 
 * (I forget what it does exactly, but it is necessary) and also interacts with
 * the IWorkbenchConfigurer in order to set the view save/restore feature as on 
 * or off.
 */
public class ApplicationWorkbenchAdvisor extends WorkbenchAdvisor {

	private static final String PERSPECTIVE_ID = "rulebender.perspective";

	public WorkbenchWindowAdvisor createWorkbenchWindowAdvisor(
			IWorkbenchWindowConfigurer configurer) {
		return new ApplicationWorkbenchWindowAdvisor(configurer);
	}

	public String getInitialWindowPerspectiveId() {
		return PERSPECTIVE_ID;
	}
	
	
	//To get the resource workspace as input, override this method:
	// For common navigator framework
	public IAdaptable getDefaultPageInput() 
	{
	  return ResourcesPlugin.getWorkspace().getRoot(); 
	}
	
	//To get the correct adapters hooked up add this code to the initialize() method:
	// For common navigator framework
	public void initialize(IWorkbenchConfigurer configurer) 
	{
		super.initialize(configurer);
		
		
		org.eclipse.ui.ide.IDE.registerAdapters();
		
		// Comment out this line when you are adding/editing views so that the state
		// is not restored from previous sessions.
		configurer.setSaveAndRestore(true);
		
		// here is the work around code
		// From http://stackoverflow.com/questions/8277902/add-package-explorer-in-rcp-application-result-in-loosing-some-icon
	    /*
	     * This is a hack to get Project tree icons to show up in the Project Explorer.
	     * It is descriped in the Eclipse Help Documents here.
	     * 
	     * http://help.eclipse.org/ganymede/topic/org.eclipse.platform.doc.isv/guide/cnf_rcp.htm
	     * 
	     */

	    final String ICONS_PATH = "icons/full/";

	    Bundle ideBundle = Platform.getBundle(IDEWorkbenchPlugin.IDE_WORKBENCH);

	    declareWorkbenchImage(
	            configurer, 
	            ideBundle,
	            org.eclipse.ui.ide.IDE.SharedImages.IMG_OBJ_PROJECT, 
	            ICONS_PATH + "obj16/prj_obj.gif",
	            true);

	    declareWorkbenchImage(
	            configurer, 
	            ideBundle,
	            org.eclipse.ui.ide.IDE.SharedImages.IMG_OBJ_PROJECT_CLOSED, 
	            ICONS_PATH + "obj16/cprj_obj.gif", 
	            true);

	    declareWorkbenchImage(
	            configurer, 
	            ideBundle, 
	            org.eclipse.ui.internal.ide.IDEInternalWorkbenchImages.IMG_ETOOL_PROBLEMS_VIEW, 
	            ICONS_PATH + "eview16/problems_view.gif", 
	            true);

	    declareWorkbenchImage(
	            configurer, 
	            ideBundle, 
	            org.eclipse.ui.internal.ide.IDEInternalWorkbenchImages.IMG_ETOOL_PROBLEMS_VIEW_ERROR, 
	            ICONS_PATH + "eview16/problems_view_error.gif", 
	            true);


	    declareWorkbenchImage(
	            configurer, 
	            ideBundle, 
	            org.eclipse.ui.internal.ide.IDEInternalWorkbenchImages.IMG_ETOOL_PROBLEMS_VIEW_WARNING, 
	            ICONS_PATH + "eview16/problems_view_warning.gif", 
	            true);

	    declareWorkbenchImage(
	            configurer, 
	            ideBundle, 
	            org.eclipse.ui.internal.ide.IDEInternalWorkbenchImages.IMG_OBJS_ERROR_PATH, 
	            ICONS_PATH + "obj16/error_tsk.gif", 
	            true);

	    declareWorkbenchImage(
	            configurer, 
	            ideBundle, 
	            org.eclipse.ui.internal.ide.IDEInternalWorkbenchImages.IMG_OBJS_WARNING_PATH, 
	            ICONS_PATH + "obj16/warn_tsk.gif", 
	            true);

	    /*
	     * End of hack in this method... 
	     */
	}

	private void declareWorkbenchImage(IWorkbenchConfigurer configurer_p, Bundle ideBundle, String symbolicName, String path, boolean shared)  
	{
	    URL url = ideBundle.getEntry(path);
	    ImageDescriptor desc = ImageDescriptor.createFromURL(url);
	    configurer_p.declareImage(symbolicName, desc, shared);
	}
	
	@Override
	public boolean preShutdown()
	{
		      
    	PlatformUI.getWorkbench()
        .getActiveWorkbenchWindow()
        .getActivePage().closeAllEditors(true);
       	
    	return true;
	}
}
